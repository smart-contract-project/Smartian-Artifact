/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.7.6;

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    bool __scribble_out_of_contract = true;
}

/// This example explains many features of Certora Verification Language 
/// see https://certora.atlassian.net/wiki/spaces/CPD/pages/7340088/The+Bank 
/// for a complete guide 
/// 
/// *
contract BankBroken is __scribble_ReentrancyUtils {
    mapping(address => uint256) private funds;
    uint256 internal totalFunds;

    function deposit(uint256 amount) public payable {
        funds[msg.sender] += amount;
        totalFunds += amount;
    }

    function transfer(address to, uint256 amount) public {
        require(funds[msg.sender] > amount);
        uint256 fundsTo = funds[to];
        funds[msg.sender] -= amount;
        funds[to] = fundsTo + amount;
    }

    function withdraw() public returns (bool success) {
        success = _original_BankBroken_withdraw();
        if (!(success)) {
            emit AssertionFailed("0: withdraw must succeed");
            assert(false);
        }
    }

    function _original_BankBroken_withdraw() private returns (bool success) {
        uint256 amount = getFunds(msg.sender);
        funds[msg.sender] = 0;
        success = msg.sender.send(amount);
        totalFunds -= amount;
    }

    function getFunds(address account) public returns (uint256 RET_0) {
        RET_0 = _original_BankBroken_getFunds(account);
        if (!(account != address(0))) {
            emit AssertionFailed("1: address zero cannot become an account");
            assert(false);
        }
    }

    function _original_BankBroken_getFunds(address account) private view returns (uint256) {
        return funds[account];
    }

    function getTotalFunds() public view returns (uint256) {
        return totalFunds;
    }

    function getEthBalance(address account) public view returns (uint256) {
        return account.balance;
    }
}