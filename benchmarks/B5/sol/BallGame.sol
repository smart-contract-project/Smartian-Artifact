/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.7.6;

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    bool __scribble_out_of_contract = true;
}

/// #invariant "Ball never reaches player 4" ballAt != 4;
contract BallGame is __scribble_ReentrancyUtils {
    struct vars1 {
        bool __scribble_check_invs_at_end;
    }

    uint256 public ballAt = 1;

    function pass() public {
        vars1 memory _v;
        _v.__scribble_check_invs_at_end = __scribble_out_of_contract;
        __scribble_out_of_contract = false;
        _original_BallGame_pass();
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __scribble_out_of_contract = _v.__scribble_check_invs_at_end;
    }

    function _original_BallGame_pass() private {
        require((ballAt >= 1) && (ballAt <= 4));
        if (ballAt == 1) ballAt = 2; else if (ballAt == 2) ballAt = 1; else if (ballAt == 3) ballAt = 4; else if (ballAt == 4) ballAt = 3;
    }

    /// Check only the current contract's state invariants
    function __scribble_BallGame_check_state_invariants_internal() internal {
        if (!(ballAt != 4)) {
            emit AssertionFailed("0: Ball never reaches player 4");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_BallGame_check_state_invariants_internal();
    }

    constructor() {
        __scribble_out_of_contract = false;
        __scribble_check_state_invariants();
        __scribble_out_of_contract = true;
    }
}